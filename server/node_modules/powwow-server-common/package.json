{
  "_args": [
    [
      {
        "raw": "powwow-server-common@git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
        "scope": null,
        "escapedName": "powwow-server-common",
        "name": "powwow-server-common",
        "rawSpec": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
        "spec": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:powwowinc/powwow-server-common.git#5.2.1",
          "sshUrl": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
          "httpsUrl": "git+https://github.com/powwowinc/powwow-server-common.git#5.2.1",
          "gitUrl": "git://github.com/powwowinc/powwow-server-common.git#5.2.1",
          "shortcut": "github:powwowinc/powwow-server-common#5.2.1",
          "directUrl": "https://raw.githubusercontent.com/powwowinc/powwow-server-common/5.2.1/package.json"
        }
      },
      "d:\\jenkins\\workspace\\Studio Windows Install\\dataStore\\server\\5.2.1"
    ]
  ],
  "_from": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
  "_id": "powwow-server-common@5.0.13",
  "_inCache": true,
  "_location": "/powwow-server-common",
  "_phantomChildren": {},
  "_requested": {
    "raw": "powwow-server-common@git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
    "scope": null,
    "escapedName": "powwow-server-common",
    "name": "powwow-server-common",
    "rawSpec": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
    "spec": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:powwowinc/powwow-server-common.git#5.2.1",
      "sshUrl": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
      "httpsUrl": "git+https://github.com/powwowinc/powwow-server-common.git#5.2.1",
      "gitUrl": "git://github.com/powwowinc/powwow-server-common.git#5.2.1",
      "shortcut": "github:powwowinc/powwow-server-common#5.2.1",
      "directUrl": "https://raw.githubusercontent.com/powwowinc/powwow-server-common/5.2.1/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+ssh://git@github.com/powwowinc/powwow-server-common.git#a04bba284c2eeb411adf282f76b111096f7ea777",
  "_shasum": "8f47c67c2e6699a4c751f42ca2b734e3a5550bff",
  "_shrinkwrap": null,
  "_spec": "powwow-server-common@git+ssh://git@github.com/powwowinc/powwow-server-common.git#5.2.1",
  "_where": "d:\\jenkins\\workspace\\Studio Windows Install\\dataStore\\server\\5.2.1",
  "author": {
    "name": "Samir Mahendra"
  },
  "dependencies": {
    "async": "latest",
    "asynquence": "latest",
    "asynquence-contrib": "latest",
    "bunyan": "1.5.1",
    "debug": "latest",
    "faker": "latest",
    "http-proxy": "1.16.2",
    "jsondiffpatch": "latest",
    "minimist": "1.2.0",
    "moment": "2.18.0",
    "nodemon": "latest",
    "promise": "7.1.1",
    "replacestream": "4.0.2",
    "request": "2.81.0",
    "soap": "0.18.0",
    "underscore": "1.8.3",
    "websocket": "latest"
  },
  "description": "Powwow Web Transformation server.",
  "devDependencies": {},
  "gitHead": "a04bba284c2eeb411adf282f76b111096f7ea777",
  "license": "MIT",
  "main": "index.js",
  "name": "powwow-server-common",
  "optionalDependencies": {},
  "private": true,
  "readme": "# Powwow Server Common\r\n\r\nEdgewood 5.0.0 - Support for no code simple transforms.\r\nv5 - Node phantom simple now built-in (since it needed too many patches).\r\n     Screenconfig has been removed.  Now directlty using screen ids.\r\nv4 - Single Selectors now check if node is visible before returning it.  This can be changed by adding { \"selectHidden\": true }\r\nv3 - Uses node-phantom-simple wrapper and PhantomJS 2.1.1.\r\n\r\nNote: Due to this bug in node-phantom-simple: https://github.com/baudehlo/node-phantom-simple/issues/132 - you will need to patch bridge.js before 'onClosing' handlers will work.\r\n\r\nThis module provides the following functionality:\r\n\r\n- Page Models\r\n- Page API\r\n- Websocket RPC API\r\n\r\n## The main application that includes this module should provide\r\n\r\n### config.json - Contains start URL for app and logging settings.\r\n\r\n## In api/index.js\r\n\r\nRequires for all the state files, which have\r\n\r\n- States registration based on URL patterns and # of frames loaded\r\n- API calls for state actions.\r\n\r\n## In inject/index.json\r\n\r\nA JSON array containing list of files to inject.  These get injected after \"common.js\".\r\n\r\n- Field page models and any app specific field types.\r\n\r\n\r\n## What is this?\r\n\r\n_Node Module for helping with Web Page transformation_\r\n\r\nHandles the following:\r\n\r\n1) Managing the websocket session\r\n\r\n2) Screen management (screen and subscreens, reconnect...)\r\n   - subscreens are for tracking different client side pages.\r\n\r\n3) Getting events and passing them to into the main application\r\n  - Page Loaded event\r\n     - All states are checked for matching URLs.\r\n     - Dealing with multi frame page loads, can count frames.\r\n\r\n  - Resource loaded event.\r\n     - These are good to know because when a click makes a XHR request,\r\n       waiting for the XHR response is better than a timer.  We can then look\r\n       for specific DOM mutations.\r\n\r\n  - DOM mutation events\r\n     - These will tell us when the DOM has changed in the background.\r\n\r\n4) Injecting common Javascript into the page context\r\n  - Code for clicking nodes, getting text, etc.\r\n  - General code for reading and setting data on the page based on the field page model.\r\n  - Field page models handle single fields as well as tables and lists.\r\n\r\nThis also contains a test page to kickstart testing of the API.\r\n\r\n## INFO\r\n\r\nUse test.html to connect to the server and test it out.\r\n\r\nCall \"export ENV=development\" to have the server start on port 3000.\r\n\r\nThe \"util\" built-in class has some useful methods:\r\n\r\n- util.getData - Takes a page model as the main parameter and returns the data that matches it\r\n\r\n- util.setData - Takes a page model and some data and calls the setters.  Format of input is {\"pageModel\": pageModel, \"values\": values}\r\n- util.callAction - Takes a page model and the item ID of the action to perform (i.e. clicks a button or link or submits a form.)  Format of input is {\"descriptor\": descriptor, \"action\": itemId}\r\n\r\nAll 3 calls above accept either a JSON page model object or a descriptor that is a string.  If it's a string, it's assumed that it's defined in the injected JS.\r\n\r\nsetData and callAction take a \"item id\" which is a path to the item in the JSON represented as a string.  E.g. for this data:\r\n\r\n{\r\n  \"myData\" {\r\n    \"mySubData\": \"something\",\r\n    \"myArray\" : [\r\n      { \"arrayItem\" : \"a thing\", \"arrayItem2\": 123 },\r\n      { \"arrayItem\" : \"another thing\", \"arrayItem2\": 456 }\r\n    ]\r\n  }\r\n}\r\n\r\nThe item ids are:\r\n\r\n- \"myData.mySubData\"\r\n- \"myData.myArray[0].arrayItem\"\r\n- \"myData.myArray[0].arrayItem2\"\r\n- \"myData.myArray[1].arrayItem\"\r\n- \"myData.myArray[1].arrayItem2\"\r\n\r\n- util.setSubScreen - Takes a { state: \"screen\", subscreen: \"subscreen\"} object and changes the subscreen.  Use this for navigation between subscreens so that the server knows the current subscreen.\r\n- util.snapshot - Take a screenshot of the page and returns the filename.\r\n\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "prestart": "npm install",
    "start": "nodemon start.js | bunyan -o short --color"
  },
  "version": "5.0.13"
}
