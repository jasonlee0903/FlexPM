'use strict';

// dependencies:
var WebSocketServer = require('websocket').server;
var http = require('http');
var request = require('request');
var logger = require('./logger');
var serverConfig = require('./serverConfig');
var config = require.main.require('./config');
var launchparams = require('./launchparams');
var httpHandler = require('./httpHandler')
var wsConnectionListener = require('./wsConnectionListener');
var stateManager = require('./stateManager');

module.exports = function () {
    // initialize the HTTP request processor
    httpHandler.initialize();

    // Create the HTTP Server
    var httpServer = http.createServer(httpHandler.requestListener);

    // Create the WebSocket server
    var wsServer = new WebSocketServer({
        httpServer: httpServer,
        autoAcceptConnections: true,
        maxReceivedFrameSize: 0x100000,
        maxReceivedMessageSize: 0x1000000,
        keepalive: config.gatlingLoadTest ? false : true
    });

    // Listen for HTTP requests.
    httpServer.listen(serverConfig.port, function () {
        logger.info('Server is listening on port ' + httpServer.address().port);
    });

    // Listen for WebSocket connections.
    wsServer.on('connect', wsConnectionListener.setupConnection);

    // Lister for process signals.
    listenForProcessSignals(httpServer, wsServer);

    // If launched by appserver, register with it.  It will have passed us a sessionId.
    if (launchparams.sessionID) {
        registerWithAppServer(launchparams.sessionID, httpServer.address().port);
    }
};

function listenForProcessSignals(httpServer, wsServer) {
    process.once('SIGUSR2', function () {
        logger.info("Received shutdown signal from nodemon.");
        wsServer.shutDown();
        httpServer.close();
        process.kill(process.pid, 'SIGUSR2');
    });

    process.once('SIGINT', function () {
        logger.info("Received Control+C interrupt, shutting down.");
        wsServer.shutDown();
        httpServer.close();
        process.exit();
    });

    process.once('SIGTERM', function () {
        logger.info("Shutting down due to SIGTERM.");
        wsServer.shutDown();
        httpServer.close();
        process.exit();
    });
}

function registerWithAppServer(sessionID, myPort) {
    var protocol = config.appServerProtocol || "http";
    var hostname = config.appServerHost || "localhost";
    var url = protocol + '://' + hostname + ':' + config.appServerPort + '/sessions/' + sessionID +
        '/register?proxyPath=' + encodeURIComponent('ws://localhost:' + myPort) +
        '&webSocket=true';

    var rejectUnauthorized = config.hasOwnProperty('appServerRejectUnauthorized') ? config.appServerRejectUnauthorized : false;

    request.get({ url: url, rejectUnauthorized: rejectUnauthorized }, function (error, response) {
        if (error) {
            logger.error({ reqErr: error }, 'Error registering, exiting...');
            process.exit();
        } else if (response.statusCode != 200) {
            logger.error('Error ' + response.statusCode + ' registration failed, exiting...');
            process.exit();
        } else {
            logger.info('Registered with AppServer', url);
            stateManager.exitIfNoConnection();
        }
    });

}