'use strict';
var launchparams = require('powwow-server-common').launchparams;

module.exports = {

    // Start URL that browsing should start at.
    startURL: "",

    // Start Method when there is no start URL.  This is for when we are doing an API integration,
    // and we don't actually need to load phantomjs.
    // startMethod: "login.onStart",

    // *******  State Detection configuration, used to determine when to check states *************
    stateDetection: {
        domMutations: {
            // premutationfilder is a method that can be used to ignore certain mutations for which
            // the ignoreList won't work.  Function signature should be:
            //    function (data, currentState) {
            //       // Return false if mutation should not lead to state detection.
            //    }
            // premutationfilter: pnr.checkForBoardingMutation,
            watch: true,
            ignoreList: [
                // List of DOM mutations to ignore.  Match is substring match.  Start with '=' for exact match.
            ],
            // Mutations will only be checked when there are no mutations after <debounceTime> ms.
            debounceTime: 100,
            loggedNodesLength: 0
        },
        resourceLoads: {
            watch: false,
            checkList: [
                // List of resources mime types to run check state for.
                "text/xml",
                "application/json"
            ],
            debounceTime: 200
        },
        // If startState is set, states detected before this state will be ignored.
        startState: "login",
        detectTimeAfterLoad: 500,
        stateCheckTimeAfterMutationHandler: 200,
        // changeWhenRequestInProgress - If this is true, state detection will do a state check when there
        // is a request in progress.  This should usually be false, but may need to be true in cases where
        // you need a force a client update even when no data changed on the server.
        changeWhenRequestInProgress: false
    },
    //
    // ******* App Server Configuration *******
    // Where is the Powwow Application server running?
    appServerPort: 8443,
    // appServerProtocol: "http",
    // appServerHost: "localhost",
    // appServerRejectUnauthorized: false, // False by default, set true to reject app server without proper certificate.
    //
    // ******* Timeout configuration *******
    // How long before a client request should be timed out if it doesn't finish executing? (in milliseconds)
    timeout: 3 * 60 * 1000,
    //
    // For how long should the session remain open once the client has disconnected? (in milliseconds)
    lifetime: 3 * 60 * 1000,
    //
    // How long to wait after being created to wait for an initial connection before terminating the session. (in milliseconds)
    firstConnectTimeout: 1 * 60 * 1000,
    //
    // Keep the session open when a timeout occurs?  (Doesn't exit, just closes the original website and frees up resources.)
    keepSessionAliveOnTimeout: false,
    //
    // Timeout for loading pages from the original website (in milliseconds)
    loadFailTimeout: 10 * 1000,
    //
    // ******* User Agent *******
    // Suffix to add to the user agent string.
    userAgentSuffix: "Powwow/1.0",
    // userAgentReplacement: "Custom user agent string goes here",
    //
    // Viewport configuration
    viewportSize: { width: 1024, height: 768 },
    //
    // Environment variables to set when launching Phantom JS.
    // This can be updated in the initialize method.
    // env: {
    //     TZ: 'America/New_York'
    // },
    //
    // Allow POSTing of JSON-RPC requests in addition to messaging via Web Socket.
    allowPOSTRequests: false,
    // ******* Logging configuration *******
    log: {
        resourceRequests: false,
        resourceLoads: false,
        // Log filters let you exclude some parameters from logs for security purposes,
        // such as passwords or other sensitive user data.
        // Usage: "api.method": [ "param1", "param2" ]
        logFilters: {
            "login.login": ["password"]
        },
        // Size of the params to log for server responses.  Requests are always fully logged.
        // By default, server responses are truncated to 80 chars.  This will allow for a longer
        // length.  Set to -1 to fully log a response, or 0 to not log it at all.
        // paramSizeFilters: {
        //     "setState.statetofullylog": -1
        // }
    },
    //
    // ********** Debugging Configuration *********
    //
    // Port to run on when in single-user mode and not managed by AppServer.
    // This defaults to 3000, and can be changed below.
    // port: 3000,
    //
    // Allow remote debugging using Chrome (or any other client that supports the remote debugging protocol)
    remoteDebug: {
        enabled: false,
        port: 8093,
        phantomRequestResponse: false
    },
    // ********** Proxy Configuration *********
    //
    // Is there a proxy server through which to connect to the the original website?
    // proxy: {
    //    host: '',
    //    port: '',
    //    proxyType: '',
    //    user: '',
    //    password: ''
    // },
    //
    // ********* Caching of files in headless browser. ************
    cache: {
        enabled: true,
        // path: "/apps/powwow/phantomCache", // If path is not specified, defaults to PhantomJS default location.
        size: 20000 // In KB
    },
    // ********* Local Storage configuration **********
    localStorageIsolationOff: false, // Set this to true to not isolate local storage.
    // When localStorageIsolation is on (the default) then we will by default
    // create a temp folder to keep localStorage under the current
    // working directory.  To create the temp folders elsewhere, set this:
    // localStoragePath: "/apps/powwow/localStorage",
    //
    // Flag to enable when running Gatling load tests.
    //  - Disables web socket server keepAlive messages (see https://github.com/gatling/gatling/issues/2601)
    //  - Stops sending a "ui.initialize" message on first connect as this confuses the load test framework.
    // gatlingLoadTest: false,
    //
    // ****************** HTTP Proxy for allowing re-writing of content ********************
    // This session can be used to make HTTP requests for HTTP content if this area is configured.
    //
    // To request data, pass in a URL parameter corresponding to the 'urlParameter' config.  E.g if it's
    // set to "originalSiteUrl", make a request to http://localhost:3000/?originalSiteUrl=<original_url>,
    // and that content will be fetched.
    //
    // The advantage over going to the original site is in the "addCookies" which will use the
    // same cookies for validating against the original site, so we can bypass authentication, and
    // in the "replaceStream" option, which allows re-writing the original content.
    //
    httpProxy: {
        urlParameter: "url",
        addCookies: true,
        agent: {
            maxSockets: 50,
            maxFreeSockets: 10
        },
        replaceStream: function (request, config, launchparams) {
            var baseURL = launchparams.httpServerUrl ? launchparams.httpServerUrl : "http://" + request.headers.host + "/";
            return [
                {
                    contentType: "text/html",
                    search: /\<header[\s\S]*?\/header\>/i,
                    replace: '',
                    options: { maxMatchLen: 10000, limit: 1 }
                },
                {
                    contentType: "text/html",
                    search: /\<footer[\s\S]*?\/footer\>/gi,
                    replace: '',
                    options: { maxMatchLen: 10000 }
                },
                {
                    contentType: "text/html",
                    search: /\<div\sdata\-component\-name\=\"navapp\"[\s\S]*?\<div\sdata\-component\-name\=\"parsys\"/,
                    replace: '<div data-component-name="parsys"',
                    options: { maxMatchLen: 10000 }
                },
                {
                    contentType: "text/html",
                    search: /target\=\"_blank\"/gi,
                    replace: '',
                    options: { maxMatchLen: 10000 }
                },
                {
                    contentType: "text/html",
                    search: /href\=\".*?\"/gi,
                    replace: function (match) {
                        var m = match.slice(6);
                        if (m[0] == "#") { return match; }
                        return 'href="' + baseURL + '?url=' + m;
                    },
                    options: { maxMatchLen: 10000 }
                },
                {
                    contentType: "text/html",
                    search: /data\-path\=\".*?\"/gi,
                    replace: function (match, config, launchparams) {
                        var m = match.slice(11);
                        if (m[0] == "#") { return match; }
                        return 'data-path="' + baseURL + '?url=' + m;
                    },
                    options: { maxMatchLen: 10000 }
                },
                {
                    contentType: "text/html",
                    search: /src\=\".*?\"/gi,
                    replace: function (match, config, launchparams) {
                        var m = match.slice(5);
                        if (m[0] == "#") { return match; }
                        return 'src="' + baseURL + '?url=' + m;
                    },
                    options: { maxMatchLen: 10000 }
                }
            ];
        }
    },
    // ***************** Application specific configuration *****************
    //
    // Dynamic configuration.  initializationData goes from the Transformation Server to the Web UI.
    getInitializationData: function () {
        return {};
    },
    //
    // Initialize method returns a promise.
    initializeReturnsPromise: false,
    //
    // Initializes the Transformation server with Data from the client.  This is also a good place to dynamically
    // update other config variables such as config.startURL or config.env.
    initialize: function (initData) {
        // Do something...
    },
    //
    // Function to call before a page gets loaded, doesn't work for iframes or for popup windows.
    // onPageLoad: function (page, frames, method) {
    // }
};
